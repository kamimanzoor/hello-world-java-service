name: pipelines-ci-template

on:
  workflow_call:
    inputs:
      defaultBranch:
        type: string
        required: false
        default: main
      buildTool:
        type: string
        required: false
        default: docker
      imageName:
        type: string
        required: false
        default: ""
      acr:
        type: string
        required: false
        default: ""
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  build_publish_image:
    name: Build & Publish Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.version.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set variables (PERFORM_RELEASE / SHA_TAG)
        id: vars
        run: |
          EVENT="${GITHUB_EVENT_NAME}"
          REF_NAME="${GITHUB_REF_NAME}"
          DEF="${{ inputs.defaultBranch }}"
          if [ "$EVENT" = "push" ] && [ "$REF_NAME" = "$DEF" ]; then
            echo "perform_release=true" >> $GITHUB_OUTPUT
            echo "sha_tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT
            echo "GIT_REF=$GITHUB_REF" >> "$GITHUB_ENV"
          elif [ "$EVENT" = "pull_request" ]; then
            pr_sha=$(jq -r '.pull_request.head.sha' "$GITHUB_EVENT_PATH")
            echo "perform_release=false" >> $GITHUB_OUTPUT
            echo "sha_tag=${pr_sha}" >> $GITHUB_OUTPUT
            echo "GIT_REF=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_ENV"
          else
            echo "perform_release=false" >> $GITHUB_OUTPUT
            echo "sha_tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT
            echo "GIT_REF=$GITHUB_REF" >> "$GITHUB_ENV"
          fi
          if [ -n "${{ inputs.imageName }}" ]; then
            echo "image_name=${{ inputs.imageName }}" >> $GITHUB_OUTPUT
          else
            echo "image_name=$(echo "$GITHUB_REPOSITORY" | cut -d/ -f2)" >> $GITHUB_OUTPUT
          fi
          echo "event=$EVENT ref=$REF_NAME"

      - name: Run Release Please
        if: steps.vars.outputs.perform_release == 'true'
        uses: googleapis/release-please-action@v4
        id: release
      - name: Display outputs
        run: |
          echo "tag_name: ${{ steps.release.outputs.tag_name }}"
          echo "release_created: ${{ steps.release.outputs.release_created }}"

      - name: Compute version
        id: version
        run: |
          if [ "${{ steps.vars.outputs.perform_release }}" = "true" ] && [ -n "${{ steps.release.outputs.tag_name }}" ]; then
            ver="${{ steps.release.outputs.tag_name }}"
          else
            ver="${{ steps.vars.outputs.sha_tag }}"
          fi
          echo "image_tag=$ver" >> $GITHUB_OUTPUT
          echo "version=$ver" >> $GITHUB_OUTPUT
          echo "Resolved image_tag=$ver"

      - name: Setup JDK (maven)
        if: inputs.buildTool == 'maven'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Build & Push Image
        env:
          DEFAULT_BRANCH: ${{ inputs.defaultBranch }}
          IMAGE_NAME: ${{ steps.vars.outputs.image_name }}
          IMAGE_TAG: ${{ steps.version.outputs.image_tag }}
          SHA_TAG: ${{ steps.vars.outputs.sha_tag }}
          BUILD_TOOL: ${{ inputs.buildTool }}
          ACR: ${{ inputs.acr }}
        run: |
          EVENT="${GITHUB_EVENT_NAME}"
          REF_NAME="${GITHUB_REF_NAME}"
          echo "Logging into ACR $ACR"
          az acr login --name "$ACR"
          export ACR="$ACR"
          if [ "$BUILD_TOOL" = "maven" ]; then
            ./mvnw versions:set -DnewVersion="${IMAGE_TAG}" -DprocessDependencies=false -DprocessPlugins=false \
              -DprocessParent=false -DprocessFromLocalAggregationRoot=false -DgenerateBackupPoms=false
            # Expect jib configured to use $ACR + IMAGE_NAME internally; fallback to explicit if needed
            ./mvnw --batch-mode package -Djib.to.image="$ACR/${IMAGE_NAME}" -Djib.to.tags="${IMAGE_TAG},latest-dev"
          else
            img="$ACR/${IMAGE_NAME}"
            docker build -t "$img:${IMAGE_TAG}" -t "$img:${SHA_TAG}" .
            docker push "$img:${IMAGE_TAG}"
            if [ "$IMAGE_TAG" != "$SHA_TAG" ]; then
              docker push "$img:${SHA_TAG}"
            fi
          fi

      - name: Trigger Deployment
        id: trigger-deployment
        run: |
          curl \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -X POST "https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy-service.yml/dispatches" \
            -d "{
              \"ref\":\"${GIT_REF}\",
              \"inputs\":{ 
                \"version\":\"${{ steps.version.outputs.version }}\",
                \"environment\":\"dev\"
              }
            }"